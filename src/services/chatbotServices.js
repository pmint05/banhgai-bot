require("dotenv").config();
import { response } from "express";
import request from "request";
const admin = require("firebase-admin");
const serviceAccount = require("../configs/ServiceAccountKey.json");
var otherApp = admin.initializeApp(
	{
		credential: admin.credential.cert(serviceAccount),
		databaseURL:
			"https://banhgai-chatbot-data-default-rtdb.asia-southeast1.firebasedatabase.app/",
	},
	"otherApp"
);
var db = otherApp.database();
let available_BGAI = db.ref().child("available_cakes/banh_gai");
let available_BGIO = db.ref().child("available_cakes/banh_gio");
let available_BROM = db.ref().child("available_cakes/banh_rom");
let available_BKHOAI = db.ref().child("available_cakes/banh_khoai");
let available_BTRO = db.ref().child("available_cakes/banh_tro");
let available_banh_gai;
let available_banh_gio;
let available_banh_rom;
let available_banh_khoai;
let available_banh_tro;

const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const IMAGE_GET_STARTED = "https://i.postimg.cc/rs93Bgqg/avt-remake.png";

let callSendAPI = async (sender_psid, response) => {
	return new Promise(async (resolve, reject) => {
		try {
			// Construct the message body
			let request_body = {
				recipient: {
					id: sender_psid,
				},
				message: response,
			};
			await sendTypingOn(sender_psid);
			await sendMarkReadMessage(sender_psid);

			// Send the HTTP request to the Messenger Platform
			request(
				{
					uri: "https://graph.facebook.com/v2.6/me/messages",
					qs: { access_token: PAGE_ACCESS_TOKEN },
					method: "POST",
					json: request_body,
				},
				(err, res, body) => {
					if (!err) {
						resolve("message sent!");
					} else {
						console.error("Unable to send message:" + err);
					}
				}
			);
		} catch (error) {
			reject(error);
		}
	});
};
let sendTypingOn = (sender_psid) => {
	// Construct the message body
	let request_body = {
		recipient: {
			id: sender_psid,
		},
		sender_action: "typing_on",
	};

	// Send the HTTP request to the Messenger Platform
	request(
		{
			uri: "https://graph.facebook.com/v2.6/me/messages",
			qs: { access_token: PAGE_ACCESS_TOKEN },
			method: "POST",
			json: request_body,
		},
		(err, res, body) => {
			if (!err) {
				console.log("sendTypingOn sent!");
			} else {
				console.error("Unable to send sendTypingOn:" + err);
			}
		}
	);
};
let sendMarkReadMessage = (sender_psid) => {
	// Construct the message body
	let request_body = {
		recipient: {
			id: sender_psid,
		},
		sender_action: "mark_seen",
	};

	// Send the HTTP request to the Messenger Platform
	request(
		{
			uri: "https://graph.facebook.com/v2.6/me/messages",
			qs: { access_token: PAGE_ACCESS_TOKEN },
			method: "POST",
			json: request_body,
		},
		(err, res, body) => {
			if (!err) {
				console.log("sendMarkReadMessage sent!");
			} else {
				console.error("Unable to send sendMarkReadMessage:" + err);
			}
		}
	);
};
let getUserName = (sender_psid) => {
	return new Promise((resolve, reject) => {
		// Send the HTTP request to the Messenger Platform
		request(
			{
				uri: `https://graph.facebook.com/${sender_psid}?fields=first_name,last_name,profile_pic&access_token=${PAGE_ACCESS_TOKEN}`,
				method: "GET",
			},
			(err, res, body) => {
				console.log(body);
				if (!err) {
					body = JSON.parse(body);
					// "first_name": "Peter",
					// "last_name": "Chang",
					let username = `${body.last_name} ${body.first_name}`;
					resolve(username);
				} else {
					console.error("Unable to send message:" + err);
					reject(err);
				}
			}
		);
	});
};
let handleGetStarted = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let username = await getUserName(sender_psid);
			let response = getStartTemplate(username);

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let getStartTemplate = (username) => {
	let response = {
		attachment: {
			type: "template",
			payload: {
				template_type: "generic",
				elements: [
					{
						title: `Ch√†o m·ª´ng ${username} ƒë√£ ƒë·∫øn v·ªõi B√ÅNH GAI B√Ä TH√öY!ü•∞`,
						subtitle: "M·ªùi b·∫°n ch·ªçn",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "MENU",
								payload: "MENU",
							},
							{
								type: "web_url",
								url: `${process.env.URL_WEBVIEW_ORDER}`,
								title: "ƒê·∫∂T B√ÅNH",
								webview_height_ratio: "tall",
								messenger_extensions: true,
							},
							{
								type: "postback",
								title: "TH√îNG TIN",
								payload: "INFOMATION",
							},
						],
					},
				],
			},
		},
	};
	return response;
};
let getQuickReplyTemplate = () => {
	let response = {
		text: "N·∫øu b·∫°n l√† ng∆∞·ªùi m·ªõi, h√£y xem c√°ch page n√†y ho·∫°t ƒë·ªông nh√© üòâ",
		quick_replies: [
			{
				content_type: "text",
				title: "HD s·ª≠ d·ª•ng Bot",
				payload: "USAGE",
			},
			// {
			// 	content_type: "user_phone_number",
			// 	title: "SƒêT",
			// 	payload: "PHONE_NUM",
			// },
		],
	};
	return response;
};
let handleSendInfo = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response1 = getInfoTemplate();
			let response2 = getQuickReplyTemplate();

			//send generic template message
			await callSendAPI(sender_psid, response1);
			await callSendAPI(sender_psid, response2);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let getInfoTemplate = () => {
	let response = {
		attachment: {
			type: "template",
			payload: {
				template_type: "button",
				text: "B√ÅNH GAI B√Ä TH√öY l√† th∆∞∆°ng hi·ªáu c·ªßa c√°c lo·∫°i b√°nh truy·ªÅn th·ªëng nh∆∞ b√°nh gai, b√°nh gi√≤, b√°nh r·ª£m, ...\nV·ªõi tu·ªïi ƒë·ªùi h∆°n 10 nƒÉm, B√ÅNH GAI B√Ä TH√öY cam k·∫øt s·∫Ω mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m mang ƒë·∫≠m ch·∫•t truy·ªÅn th·ªëng v√† c√≥ ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t ƒë·∫øn v·ªõi ng∆∞·ªùi ti√™u d√πng !‚ù§Ô∏è",
				buttons: [
					{
						type: "phone_number",
						title: "‚òéÔ∏è G·ªåI NGAY ‚òéÔ∏è",
						payload: "+84399514332",
					},
					{
						type: "postback",
						title: "XEM B√ÅNH S·∫¥N C√ì",
						payload: "AVAILABLE_CAKES",
					},
				],
			},
		},
	};
	return response;
};
let handleSendAvailableCakes = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = getAvailableCakes();

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};

let getAvailableCakes = async () => {
	await available_BGAI.once("value", (snap) => {
		available_banh_gai = snap.val();
	});
	await available_BGIO.once("value", (snap) => {
		available_banh_gio = snap.val();
	});
	await available_BROM.once("value", (snap) => {
		available_banh_rom = snap.val();
	});
	await available_BKHOAI.once("value", (snap) => {
		available_banh_khoai = snap.val();
	});
	await available_BTRO.once("value", (snap) => {
		available_banh_tro = snap.val();
	});
	let response = {
		attachment: {
			type: "template",
			payload: {
				template_type: "button",
				text: `‚ñ∑ S·ªë b√°nh s·∫µn c√≥:\n‚Ä¢ B√°nh Gai: ${available_banh_gai}\n‚Ä¢ B√°nh Gi√≤: ${available_banh_gio}\n‚Ä¢ B√°nh R·ª£m: ${available_banh_rom}\n‚Ä¢ B√°nh Khoai: ${available_banh_khoai}\n‚Ä¢ B√°nh gio: ${available_banh_tro}`,
				buttons: [
					{
						type: "web_url",
						url: `${process.env.URL_WEBVIEW_ORDER}`,
						title: "ƒê·∫∂T NGAY",
						webview_height_ratio: "tall",
						messenger_extensions: true,
					},
				],
			},
		},
	};
	return response;
};
let handleSendMenu = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = getMenuTemplate();

			//send text message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let getMenuTemplate = () => {
	let response = {
		attachment: {
			type: "template",
			payload: {
				template_type: "generic",
				elements: [
					{
						title: "B√°nh Gai",
						subtitle:
							"5k/c√°i\nM·ªôt lo·∫°i b√°nh ng·ªçt truy·ªÅn th·ªëng c·ªßa Vi·ªát Nam. B√°nh c√≥ m√†u ƒëen m√†u c·ªßa l√° Gai, m√πi th∆°m ƒë·∫∑c tr∆∞ng c·ªßa ƒë·ªó xanh v√† g·∫°o n·∫øp.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "web_url",
								url: `${process.env.URL_WEBVIEW_ORDER}`,
								title: "ƒê·∫∂T NGAY",
								webview_height_ratio: "tall",
								messenger_extensions: true,
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BGAI_DETAILS",
							},
						],
					},
					{
						title: "B√°nh Gi√≤",
						subtitle:
							"5k/c√°i\nB√°nh ƒë∆∞·ª£c l√†m b·∫±ng b·ªôt g·∫°o t·∫ª, nh√¢n c√≥ v·ªã m·∫∑n v·ªõi th·ªãt l·ªçn, m·ªôc nhƒ© v√† h√†nh kh√¥.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "web_url",
								url: `${process.env.URL_WEBVIEW_ORDER}`,
								title: "ƒê·∫∂T NGAY",
								webview_height_ratio: "tall",
								messenger_extensions: true,
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BGIO_DETAILS",
							},
						],
					},
					{
						title: "B√°nh R·ª£m",
						subtitle:
							"5k/c√°i\nM·ªôt lo·∫°i b√°nh truy·ªÅn th·ªëng c·ªßa ng∆∞·ªùi T√†y - bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± no ƒë·ªß v√† ·∫•m √™m.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "web_url",
								url: `${process.env.URL_WEBVIEW_ORDER}`,
								title: "ƒê·∫∂T NGAY",
								webview_height_ratio: "tall",
								messenger_extensions: true,
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BROM_DETAILS",
							},
						],
					},
					{
						title: "B√°nh Khoai",
						subtitle:
							"6k/c√°i\nƒê·∫∑c s·∫£n H∆∞ng Y√™n. C√≥ l·ªõp v·ªè gi√≤n v√† m√°t t·ª´ khoai s·ªç, th√™m v·ªã th∆°m v√† b√πi c·ªßa nh√¢n ƒë·∫≠u xanh.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "web_url",
								url: `${process.env.URL_WEBVIEW_ORDER}`,
								title: "ƒê·∫∂T NGAY",
								webview_height_ratio: "tall",
								messenger_extensions: true,
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BKHOAI_DETAILS",
							},
						],
					},
					{
						title: "B√°nh Gio (Tro)",
						subtitle:
							"5k/c√°i\nB√°nh gio, b√°nh tro, b√°nh √∫ tro hay b√°nh n·∫≥ng l√† m·ªôt lo·∫°i b√°nh ƒë∆∞·ª£c l√†m v·ªõi th√†nh ph·∫ßn ch√≠nh l√† g·∫°o n·∫øp ng√¢m qua n∆∞·ªõc tro",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "web_url",
								url: `${process.env.URL_WEBVIEW_ORDER}`,
								title: "ƒê·∫∂T NGAY",
								webview_height_ratio: "tall",
								messenger_extensions: true,
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BTRO_DETAILS",
							},
						],
					},
				],
			},
		},
	};
	return response;
};
let handleSendBgaiDetails = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = {
				text: "‚ñ∑ B√°nh gai l√† m·ªôt lo·∫°i b√°nh ng·ªçt truy·ªÅn th·ªëng c·ªßa Vi·ªát Nam, b·∫Øt ngu·ªìn v√πng ƒê·ªìng b·∫±ng B·∫Øc b·ªô ·ªü Vi·ªát Nam. B√°nh c√≥ d·∫°ng h√¨nh vu√¥ng, m√†u ƒëen m√†u c·ªßa l√° Gai, m√πi th∆°m ƒë·∫∑c tr∆∞ng c·ªßa ƒë·ªó xanh v√† g·∫°o n·∫øp.\n‚ñ∑ Th√†nh ph·∫ßn:\n‚Ä¢ V·ªè b√°nh: B·ªôt g·∫°o n·∫øp, l√° c√¢y Gai, ƒë∆∞·ªùng, v·ª´ng.\n‚Ä¢ Nh√¢n b√°nh: ƒê·ªó xanh, c√πi d·ª´a n·∫°o nh·ªè, ƒë∆∞·ªùng.\n‚ñ∑ H·∫°n s·ª≠ d·ª•ng: 5-7 ng√†y ·ªü nhi·ªát ƒë·ªô ph√≤ng",
			};

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let handleSendBgioDetails = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = {
				text: "‚ñ∑ B√°nh gi√≤ l√† m·ªôt m√≥n b√°nh ngon, d·ªÖ ƒÉn, ƒë∆∞·ª£c r·∫•t nhi·ªÅu ng∆∞·ªùi y√™u th√≠ch. M√≥n b√°nh n√†y c√≤n g·∫Øn li·ªÅn v·ªõi k√Ω ·ª©c tu·ªïi th∆° c·ªßa bi·∫øt bao th·∫ø h·ªá h·ªçc sinh, sinh vi√™n Vi·ªát Nam.\n‚ñ∑ Th√†nh ph·∫ßn:\n‚Ä¢ V·ªè b√°nh: B·ªôt g·∫°o t·∫ª.\n‚Ä¢ Nh√¢n b√°nh: Th·ªãt bƒÉm, m·ªôc nhƒ©, h√†nh kh√¥.\n‚ñ∑ H·∫°n s·ª≠ d·ª•ng: D√πng trong ng√†y.",
			};

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let handleSendBromDetails = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = {
				text: "‚ñ∑ B√°nh r·ª£m c·ªßa ng∆∞·ªùi T√†y l√† th·ª© b√°nh v√¥ c√πng ph·ªï bi·∫øn, m·ªôc m·∫°c m√† ƒë·ªÉ l·∫°i bi·∫øt bao th∆∞∆°ng nh·ªõ. Ng√†y t·∫øt, m√≥n b√°nh r·ª£m l√† bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± no ƒë·ªß v√† ·∫•m √™m.\n‚ñ∑ Th√†nh ph·∫ßn:\n‚Ä¢ V·ªè b√°nh: B·ªôt g·∫°o n·∫øp.\n‚Ä¢ Nh√¢n b√°nh: ƒê·ªó xanh, h·∫°t ti√™u.\n‚ñ∑ H·∫°n s·ª≠ d·ª•ng: D√πng trong ng√†y.",
			};

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let handleSendBkhoaiDetails = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = {
				text: "‚ñ∑ B√°nh khoai s·ªç l√† m·ªôt ƒë·∫∑c s·∫£n H∆∞ng Y√™n ƒë∆∞·ª£c kh√° nhi·ªÅu ng∆∞·ªùi y√™u th√≠ch. V·ªõi l·ªõp v·ªè gi√≤n v√† m√°t t·ª´ khoai s·ªç, th√™m v·ªã th∆°m v√† b√πi c·ªßa nh√¢n ƒë·∫≠u xanh khi·∫øn cho nh·ªØng chi·∫øc b√°nh khoai s·ªç c√†ng ƒë∆∞·ª£c y√™u th√≠ch h∆°n v√† ƒë∆∞·ª£c s·ª≠ d·ª•ng cho b·ªØa s√°ng.\n‚ñ∑ Th√†nh ph·∫ßn:\n‚Ä¢ V·ªè b√°nh: Khoai s·ªç, b·ªôt g·∫°o t·∫ª.\n‚Ä¢ Nh√¢n b√°nh: ƒê·ªó xanh, th·ªãt m·ª°, h·∫°t ti√™u.\n‚ñ∑ H·∫°n s·ª≠ d·ª•ng: D√πng trong ng√†y.",
			};

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let handleSendBtroDetails = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = {
				text: "‚ñ∑ B√°nh gio, b√°nh tro, b√°nh √∫ tro hay b√°nh n·∫≥ng l√† m·ªôt lo·∫°i b√°nh ƒë∆∞·ª£c l√†m v·ªõi th√†nh ph·∫ßn ch√≠nh l√† g·∫°o n·∫øp ng√¢m qua n∆∞·ªõc tro (t·ª´ tro than l√° c√¢y, nh·∫•t l√† l√° tre) v√† g√≥i l√° ƒëem lu·ªôc ch√≠n trong n·ªìi. B√°nh gio c√≥ xu·∫•t x·ª© t·ª´ Qu·∫£ng ƒê√¥ng, Trung Qu·ªëc v√† c√≥ t·ª´ th·ªùi nh√† Minh.\n‚ñ∑ Th√†nh ph·∫ßn:\n‚Ä¢ Ph·∫ßn b√°nh: B·ªôt g·∫°o n·∫øp, n∆∞·ªõc gio.\n‚Ä¢ N∆∞·ªõc ch·∫•m: M·∫≠t.\n‚ñ∑ H·∫°n s·ª≠ d·ª•ng: D√πng trong ng√†y.",
			};

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let handleSendUsage = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response = {
				text: "Page B√°nh Gai B√† Th√∫y ho·∫°t ƒë·ªông 1 c√°ch ho√†n to√†n t·ª± ƒë·ªông, b·∫°n kh√¥ng c·∫ßn nh·∫Øn v·ªõi page b·∫•t k√¨ d√≤ng tin n√†o m√† thay v√†o ƒë√≥ h√£y s·ª≠ d·ª•ng nh·ªØng n√∫t ƒë√≠nh k√®m v·ªõi tin nh·∫Øn t·ª´ page ho·∫∑c trong menu c·ªë ƒë·ªãnh d∆∞·ªõi ph·∫ßn nh·∫≠p tin nh·∫Øn",
			};

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};

module.exports = {
	handleGetStarted: handleGetStarted,
	handleSendMenu: handleSendMenu,
	handleSendInfo: handleSendInfo,
	handleSendBgaiDetails: handleSendBgaiDetails,
	handleSendBgioDetails: handleSendBgioDetails,
	handleSendBromDetails: handleSendBromDetails,
	handleSendBkhoaiDetails: handleSendBkhoaiDetails,
	handleSendBtroDetails: handleSendBtroDetails,
	callSendAPI: callSendAPI,
	getUserName: getUserName,
	handleSendUsage: handleSendUsage,
	handleSendAvailableCakes: handleSendAvailableCakes,
};
