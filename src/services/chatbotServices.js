require("dotenv").config();
import { response } from "express";
import request from "request";

const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const IMAGE_GET_STARTED = "https://i.postimg.cc/rs93Bgqg/avt-remake.png";

let callSendAPI = async (sender_psid, response) => {
	// Construct the message body
	let request_body = {
		recipient: {
			id: sender_psid,
		},
		message: response,
	};
	await sendTypingOn(sender_psid);
	await sendMarkReadMessage(sender_psid);

	// Send the HTTP request to the Messenger Platform
	request(
		{
			uri: "https://graph.facebook.com/v2.6/me/messages",
			qs: { access_token: PAGE_ACCESS_TOKEN },
			method: "POST",
			json: request_body,
		},
		(err, res, body) => {
			if (!err) {
				console.log("message sent!");
			} else {
				console.error("Unable to send message:" + err);
			}
		}
	);
};
let sendTypingOn = (sender_psid) => {
	// Construct the message body
	let request_body = {
		recipient: {
			id: sender_psid,
		},
		sender_action: "typing_on",
	};

	// Send the HTTP request to the Messenger Platform
	request(
		{
			uri: "https://graph.facebook.com/v2.6/me/messages",
			qs: { access_token: PAGE_ACCESS_TOKEN },
			method: "POST",
			json: request_body,
		},
		(err, res, body) => {
			if (!err) {
				console.log("sendTypingOn sent!");
			} else {
				console.error("Unable to send sendTypingOn:" + err);
			}
		}
	);
};
let sendMarkReadMessage = (sender_psid) => {
	// Construct the message body
	let request_body = {
		recipient: {
			id: sender_psid,
		},
		sender_action: "mark_seen",
	};

	// Send the HTTP request to the Messenger Platform
	request(
		{
			uri: "https://graph.facebook.com/v2.6/me/messages",
			qs: { access_token: PAGE_ACCESS_TOKEN },
			method: "POST",
			json: request_body,
		},
		(err, res, body) => {
			if (!err) {
				console.log("sendMarkReadMessage sent!");
			} else {
				console.error("Unable to send sendMarkReadMessage:" + err);
			}
		}
	);
};
let getUserName = (sender_psid) => {
	return new Promise((resolve, reject) => {
		// Send the HTTP request to the Messenger Platform
		request(
			{
				uri: `https://graph.facebook.com/${sender_psid}?fields=first_name,last_name,profile_pic&access_token=${PAGE_ACCESS_TOKEN}`,
				method: "GET",
			},
			(err, res, body) => {
				console.log(body);
				if (!err) {
					body = JSON.parse(body);
					// "first_name": "Peter",
					// "last_name": "Chang",
					let username = `${body.last_name} ${body.first_name}`;
					resolve(username);
				} else {
					console.error("Unable to send message:" + err);
					reject(err);
				}
			}
		);
	});
};

let handleGetStarted = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let username = await getUserName(sender_psid);
			let response = getStartTemplate(username);

			//send generic template message
			await callSendAPI(sender_psid, response);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};

let getStartTemplate = (username) => {
	let response = {
		attachment: {
			type: "template",
			payload: {
				template_type: "generic",
				elements: [
					{
						title: `Xin ch√†o ${username} ƒë√£ ƒë·∫øn v·ªõi B√ÅNH GAI B√Ä TH√öY!ü•∞`,
						subtitle: "M·ªùi b·∫°n ch·ªçn",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "MENU",
								payload: "MENU",
							},
							{
								type: "postback",
								title: "ƒê·∫∂T B√ÅNH",
								payload: "RESERVE",
							},
							{
								type: "postback",
								title: "TH√îNG TIN",
								payload: "INFOMATION",
							},
						],
					},
				],
			},
		},
	};
	return response;
};

let handleSendMenu = (sender_psid) => {
	return new Promise(async (resolve, reject) => {
		try {
			let response1 = getMenuTemplate();

			//send text message
			await callSendAPI(sender_psid, response1);

			resolve("done");
		} catch (e) {
			reject(e);
		}
	});
};
let getMenuTemplate = () => {
	let response = {
		attachment: {
			type: "template",
			payload: {
				template_type: "generic",
				elements: [
					{
						title: "B√°nh Gai",
						subtitle:
							"M·ªôt lo·∫°i b√°nh ng·ªçt truy·ªÅn th·ªëng c·ªßa Vi·ªát Nam. B√°nh c√≥ d·∫°ng h√¨nh vu√¥ng, m√†u ƒëen m√†u c·ªßa L√° Gai, m√πi th∆°m ƒë·∫∑c tr∆∞ng c·ªßa ƒë·ªó xanh v√† g·∫°o n·∫øp.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "ƒê·∫∂T NGAY",
								payload: "RESERVE_NOW",
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BGAI_INFO",
							},
						],
					},
					{
						title: "B√°nh Gi√≤",
						subtitle: "M·ªôt lo·∫°i b√°nh m·∫∑n ƒë∆∞·ª£c l√†m b·∫±ng b·ªôt g·∫°o t·∫ª.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "ƒê·∫∂T NGAY",
								payload: "RESERVE_NOW",
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BGIO_INFO",
							},
						],
					},
					{
						title: "B√°nh R·ª£m",
						subtitle:
							"M·ªôt lo·∫°i b√°nh truy·ªÅn th·ªëng c·ªßa ng∆∞·ªùi T√†y - bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± no ƒë·ªß v√† ·∫•m √™m.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "ƒê·∫∂T NGAY",
								payload: "RESERVE_NOW",
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BROM_INFO",
							},
						],
					},
					{
						title: "B√°nh Khoai",
						subtitle:
							"M·ªôt ƒë·∫∑c s·∫£n H∆∞ng Y√™n. C√≥ l·ªõp v·ªè gi√≤n v√† m√°t t·ª´ khoai s·ªç, th√™m v·ªã th∆°m v√† b√πi c·ªßa nh√¢n ƒë·∫≠u xanh.",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "ƒê·∫∂T NGAY",
								payload: "RESERVE_NOW",
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BKHOAI_INFO",
							},
						],
					},
					{
						title: "B√°nh Gio (Tro)",
						subtitle:
							"B√°nh gio, b√°nh tro, b√°nh √∫ tro hay b√°nh n·∫≥ng l√† m·ªôt lo·∫°i b√°nh ƒë∆∞·ª£c l√†m v·ªõi th√†nh ph·∫ßn ch√≠nh l√† g·∫°o n·∫øp ng√¢m qua n∆∞·ªõc tro",
						image_url: IMAGE_GET_STARTED,
						buttons: [
							{
								type: "postback",
								title: "ƒê·∫∂T NGAY",
								payload: "RESERVE_NOW",
							},
							{
								type: "postback",
								title: "TH√îNG TIN CHI TI·∫æT",
								payload: "BTRO_INFO",
							},
						],
					},
				],
			},
		},
	};
	return response;
};

module.exports = {
	handleGetStarted: handleGetStarted,
	handleSendMenu: handleSendMenu,
};
